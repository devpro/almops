include:
  - remote: 'https://gitlab.com/neuvector/gitlab-plugin/-/raw/master/scan.yml'
  - template: Jobs/Container-Scanning.gitlab-ci.yml

stages:
  - build
  - test
  - publish

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "web"'

variables:
  IMAGE_REPOSITORY: $CONTAINER_REGISTRY_DOMAIN/$CONTAINER_REGISTRY_USER/almops
  IMAGE_TAG: 1.3.$CI_PIPELINE_ID
  IMAGE_NAME: $IMAGE_REPOSITORY:$IMAGE_TAG
  IMAGE_LATEST: $IMAGE_REPOSITORY:latest

.dotnet:
  image: mcr.microsoft.com/dotnet/sdk:9.0
  variables:
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    COREHOST_TRACE: 0
    BUILD_SOURCEBRANCHNAME: $CI_COMMIT_BRANCH
    BUILD_BUILDID: $CI_PIPELINE_ID

dotnet-build:
  extends: .dotnet
  stage: build
  script:
    - dotnet restore
    - dotnet build --no-restore --configuration Debug

dotnet-test:
  extends: .dotnet
  stage: test
  variables:
    DOTNET_TEST_RESULT_XMLFILES: ./**/*test-result.xml
    DOTNET_TEST_COVERAGE_XMLFILES: ./test/*/TestResults/*/coverage.cobertura.xml
    DOTNET_TEST_REPORT_FOLDER: report
    # other options available: /d:sonar.coverage.exclusions=... /d:sonar.cpd.exclusions=**/Models/*.cs,**/Dto/*.cs
    SONAR_EXTRA_PARAMETERS: /d:sonar.cpd.exclusions=**/*Generated*.cs,report/** /d:sonar.coverageReportPaths=report/SonarQube.xml
    AlmOps__Sandbox__Organization: $AZUREDEVOPS_TEST_ORG
    AlmOps__Sandbox__Username: $AZUREDEVOPS_TEST_USERNAME
    AlmOps__Sandbox__Token: $AZUREDEVOPS_TEST_TOKEN
    AlmOps__Sandbox__Project: $AZUREDEVOPS_TEST_PROJECT
    AlmOps__Sandbox__VariableGroupId: $AZUREDEVOPS_TEST_VARIABLEGROUPID
  before_script:
    # updates system
    - cat /etc/issue
    - apt-get update
    - apt-get install -y gnupg
    # installs java runtime, sonar scanner and report generator tool
    - apt install -y default-jre
    - dotnet tool install --global dotnet-sonarscanner
    - dotnet tool install --global dotnet-reportgenerator-globaltool
    # adds dotnet global tool in the path
    - export PATH="$PATH:/root/.dotnet/tools"
  script:
    - dotnet sonarscanner begin /o:$SONAR_ORGANIZATION /k:$SONAR_PROJECTKEY /n:AlmOps /d:sonar.host.url=$SONAR_HOSTURL /d:sonar.token=$SONAR_TOKEN $SONAR_EXTRA_PARAMETERS
    - dotnet test --configuration Debug --logger:"junit;LogFilePath=..\..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" --collect:"XPlat Code Coverage"
    - reportgenerator "-reports:$DOTNET_TEST_COVERAGE_XMLFILES" -targetdir:$DOTNET_TEST_REPORT_FOLDER "-reporttypes:Cobertura;Html;TextSummary;SonarQube"
    - dotnet sonarscanner end /d:sonar.token=$SONAR_TOKEN
    - cat $DOTNET_TEST_REPORT_FOLDER/Summary.txt
  artifacts:
    when: always
    paths:
      - $DOTNET_TEST_RESULT_XMLFILES
      - $DOTNET_TEST_COVERAGE_XMLFILES
      - $DOTNET_TEST_REPORT_FOLDER/Cobertura.xml
      - $DOTNET_TEST_REPORT_FOLDER/Summary.txt
    reports:
      junit:
        - $DOTNET_TEST_RESULT_XMLFILES
      coverage_report:
        coverage_format: cobertura
        # should also work and will prevent issue with line limit
        # path: $DOTNET_TEST_REPORT_FOLDER/Cobertura.xml
        path: $DOTNET_TEST_COVERAGE_XMLFILES
  coverage: '/Line coverage: \d+(?:\.\d+)?%/'

nuget-push:
  extends: .dotnet
  stage: publish
  script:
    - dotnet pack --configuration Release -o output
    - for f in output/*.nupkg; do dotnet nuget push "$f" --api-key $NUGET_APIKEY --source $NUGET_SOURCE ; done
  only:
    refs:
      - main
    changes:
      - Directory.Build.props
    variables:
      - $CI_PIPELINE_SOURCE == "push"

#.docker:
#  image: docker:stable
#  services:
#    - docker-dind
#  tags:
#    - gitlab-org-docker

.podman:
  image: quay.io/podman/stable:latest

podman-build:
  extends: .podman
  stage: build
  script:
    - podman build . -t $IMAGE_NAME -f src/ConsoleApp/Dockerfile
    - podman save -o image.tar $IMAGE_NAME
  timeout: 30 minutes
  artifacts:
    expire_in: 1 hours
    paths:
      - image.tar

neuvector_scan:
  #extends: .docker
  stage: test
  variables:
    #image_registry_url: "https://registry-1.docker.io"
    #image_registry_user: $CONTAINER_REGISTRY_USER
    #image_registry_password: $CONTAINER_REGISTRY_PASSWD
    scan_local_image: "true"
    image_tar: "image.tar"
    image_repo: $IMAGE_REPOSITORY
    image_tag: $IMAGE_TAG
    #nv_registry_url: "https://registry-1.docker.io"
    nv_registry_user: $CONTAINER_REGISTRY_USER
    nv_registry_password: $CONTAINER_REGISTRY_PASSWD
    scan_layers: "false"
    high_vul_to_fail: 0
    medium_vul_to_fail: 0
    vul_names_to_fail: ""
    #DOCKER_HOST: tcp://docker:2376
    #DOCKER_TLS_CERTDIR: "/certs"
    #DOCKER_TLS_VERIFY: 1
    #DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  #before_script:
  #  - apk add curl
  #  - apk add jq
  #  - until docker info; do sleep 1; done
  after_script:
    - cat ./nvreport/scan-summary.txt
  dependencies:
    - podman-build

# https://docs.gitlab.com/user/application_security/container_scanning/
container_scanning:
  variables:
    CS_IMAGE: "archive://image.tar"
  dependencies:
    - podman-build

podman-push:
  extends: .podman
  stage: publish
  before_script:
    - echo "$CONTAINER_REGISTRY_PASSWD" | podman login $CONTAINER_REGISTRY_DOMAIN -u "$CONTAINER_REGISTRY_USER" --password-stdin
  script:
    - podman load -i image.tar
    - podman push $IMAGE_NAME
    - if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then podman tag $IMAGE_NAME $IMAGE_LATEST; podman push $IMAGE_LATEST; fi
  only:
    - main
    - web
  dependencies:
    - podman-build
